{"version":3,"file":"elementPosition.js","sourceRoot":"","sources":["../../lib/methods/elementPosition.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,gGAA2F;AAC3F,0FAAqF;AACrF,wHAAqH;AACrH,kDAA6C;AAG7C,kHAA6G;AAC7G,0GAAqG;AAMrG,SAAsB,yBAAyB,CAC7C,QAAkB,EAClB,qBAA8B,EAC9B,OAAoB;;;;;;yBAGhB,qBAAqB,EAArB,cAAqB;oBAErB,WAAM,QAAQ,CAAC,8CAAoC,EAAE,mBAAO,CAAC,OAAO,EAAE,KAAK,CAAC,EAAA;;oBADvE,MAAM,GAAiC,CAC5C,SAA4E,CAC5E,CAAC,gBAAgB,OAFN;oBAIb,WAAO,QAAQ,CAAC,iFAAuC,EAAE,MAAM,EAAE,OAAO,CAAC,EAAC;wBAI5E,WAAO,QAAQ,CAAC,qCAA2B,EAAE,OAAO,CAAC,EAAC;;;;CACvD;AAhBD,8DAgBC;AAiBD,SAAsB,yBAAyB,CAC7C,QAAkB,EAClB,WAAmB,EACnB,gBAAwB,EACxB,OAAoB;;;YAEpB,IAAI,gBAAgB,GAAG,WAAW,EAAE;gBAClC,WAAO,QAAQ,CAAC,kCAAwB,EAAE,OAAO,CAAC,EAAC;aACpD;YAED,WAAO,QAAQ,CAAC,qCAA2B,EAAE,OAAO,CAAC,EAAC;;;CACvD;AAXD,8DAWC;AAKD,SAAsB,qBAAqB,CAAC,QAAkB,EAAE,OAAoB;;;;;wBAEnC,WAAM,QAAQ,CAAC,0CAAgC,EAAE,mBAAO,CAAC,GAAG,CAAC,EAAA;;oBAArG,MAAM,GAAiC,CAAC,SAA6D,CAAE,CAAC,gBAAgB,OAAlH;oBAEb,WAAO,QAAQ,CAAC,iFAAuC,EAAE,MAAM,EAAE,OAAO,CAAC,EAAC;;;;CAC3E;AALD,sDAKC","sourcesContent":["import getElementPositionTopWindow from '../clientSideScripts/getElementPositionTopWindow';\nimport getElementPositionTopDom from '../clientSideScripts/getElementPositionTopDom';\nimport {getElementPositionTopScreenNativeMobile} from '../clientSideScripts/getElementPositionTopScreenNativeMobile';\nimport {OFFSETS} from '../helpers/constants';\nimport {Executor} from './methods.interface';\nimport {ElementPosition} from '../clientSideScripts/elementPosition.interfaces';\nimport getAndroidStatusAddressToolBarHeight from '../clientSideScripts/getAndroidStatusAddressToolBarHeight';\nimport getIosStatusAddressToolBarHeight from '../clientSideScripts/getIosStatusAddressToolBarHeight';\nimport {StatusAddressToolBarHeight} from '../clientSideScripts/statusAddressToolBarHeight.interfaces';\n\n/**\n * Get the element position on a Android device\n */\nexport async function getElementPositionAndroid(\n  executor: Executor,\n  isNativeWebScreenshot: boolean,\n  element: HTMLElement,\n): Promise<ElementPosition> {\n  // This is the native webscreenshot\n  if (isNativeWebScreenshot) {\n    const {height} = (<StatusAddressToolBarHeight>(\n      await executor(getAndroidStatusAddressToolBarHeight, OFFSETS.ANDROID, false)\n    )).statusAddressBar;\n\n    return executor(getElementPositionTopScreenNativeMobile, height, element);\n  }\n\n  // This is the ChromeDriver screenshot\n  return executor(getElementPositionTopWindow, element);\n}\n\n/**\n * Get the element position on a desktop browser\n *\n * @param {function} executor         The function to execute JS in the browser\n * @param {number}   innerHeight      The inner height of the screen\n * @param {number}   screenshotHeight The screenshot height\n * @param {element}  element          The element\n *\n * @returns {Promise<{\n * \t\theight: number,\n *    width: number,\n *    x: number,\n *    y: number\n * }>}\n */\nexport async function getElementPositionDesktop(\n  executor: Executor,\n  innerHeight: number,\n  screenshotHeight: number,\n  element: HTMLElement,\n): Promise<ElementPosition> {\n  if (screenshotHeight > innerHeight) {\n    return executor(getElementPositionTopDom, element);\n  }\n\n  return executor(getElementPositionTopWindow, element);\n}\n\n/**\n * Get the element position on iOS Safari\n */\nexport async function getElementPositionIos(executor: Executor, element: HTMLElement): Promise<ElementPosition> {\n  // Determine status and address bar height\n  const {height} = (<StatusAddressToolBarHeight>(await executor(getIosStatusAddressToolBarHeight, OFFSETS.IOS))).statusAddressBar;\n\n  return executor(getElementPositionTopScreenNativeMobile, height, element);\n}\n"]}