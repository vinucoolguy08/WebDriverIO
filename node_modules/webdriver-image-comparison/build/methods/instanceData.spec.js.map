{"version":3,"file":"instanceData.spec.js","sourceRoot":"","sources":["../../lib/methods/instanceData.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import getEnrichedInstanceData from './instanceData';\n\ndescribe('getEnrichedInstanceData', () => {\n  it('should be able to enrich the instance data with all the defaults for desktop with no shadow padding', async () => {\n    const instanceOptions = {\n      addressBarShadowPadding: 6,\n      toolBarShadowPadding: 6,\n      browserName: 'browserName',\n      browserVersion: 'browserVersion',\n      deviceName: 'deviceName',\n      logName: 'logName',\n      name: 'name',\n      nativeWebScreenshot: false,\n      platformName: 'platformName',\n      platformVersion: 'platformVersion',\n    };\n    const MOCKED_EXECUTOR = jest.fn()\n    // getEnrichedInstanceData for: getScreenDimensions\n      .mockResolvedValueOnce(\n        {\n          body: {\n            offsetHeight: 0,\n            scrollHeight: 0,\n          },\n          html: {\n            clientHeight: 0,\n            clientWidth: 0,\n            offsetHeight: 0,\n            scrollHeight: 0,\n            scrollWidth: 0,\n          },\n          window: {\n            devicePixelRatio: 1,\n            innerHeight: 768,\n            innerWidth: 1024,\n            outerHeight: 768,\n            outerWidth: 1024,\n            screenHeight: 0,\n            screenWidth: 0,\n          },\n        }\n      );\n\n    expect(await getEnrichedInstanceData(MOCKED_EXECUTOR, instanceOptions, false)).toMatchSnapshot();\n  });\n\n  it('should be able to enrich the instance data with all the defaults for Android ChromeDriver with no shadow padding', async () => {\n    const instanceOptions = {\n      addressBarShadowPadding: 6,\n      toolBarShadowPadding: 6,\n      browserName: 'browserName',\n      browserVersion: 'browserVersion',\n      deviceName: 'deviceName',\n      logName: 'logName',\n      name: 'name',\n      nativeWebScreenshot: false,\n      platformName: 'Android',\n      platformVersion: '8.0',\n    };\n    const MOCKED_EXECUTOR = jest.fn()\n    // getEnrichedInstanceData for: getScreenDimensions\n      .mockResolvedValueOnce(\n        {\n          body: {\n            offsetHeight: 0,\n            scrollHeight: 0,\n          },\n          html: {\n            clientHeight: 0,\n            clientWidth: 0,\n            offsetHeight: 0,\n            scrollHeight: 0,\n            scrollWidth: 0,\n          },\n          window: {\n            devicePixelRatio: 1,\n            innerHeight: 768,\n            innerWidth: 1024,\n            outerHeight: 768,\n            outerWidth: 1024,\n            screenHeight: 0,\n            screenWidth: 0,\n          },\n        }\n      );\n\n    expect(await getEnrichedInstanceData(MOCKED_EXECUTOR, instanceOptions, false)).toMatchSnapshot();\n  });\n\n  it('should be able to enrich the instance data with all the defaults for Android Native Webscreenshot with no shadow padding', async () => {\n    const instanceOptions = {\n      addressBarShadowPadding: 6,\n      toolBarShadowPadding: 6,\n      browserName: 'browserName',\n      browserVersion: 'browserVersion',\n      deviceName: 'deviceName',\n      logName: 'logName',\n      name: 'name',\n      nativeWebScreenshot: true,\n      platformName: 'Android',\n      platformVersion: '8.0',\n    };\n    const MOCKED_EXECUTOR = jest.fn()\n    // getEnrichedInstanceData for: getScreenDimensions\n      .mockResolvedValueOnce(\n        {\n          body: {\n            offsetHeight: 0,\n            scrollHeight: 0,\n          },\n          html: {\n            clientHeight: 0,\n            clientWidth: 0,\n            offsetHeight: 0,\n            scrollHeight: 0,\n            scrollWidth: 0,\n          },\n          window: {\n            devicePixelRatio: 1,\n            innerHeight: 768,\n            innerWidth: 1024,\n            outerHeight: 768,\n            outerWidth: 1024,\n            screenHeight: 0,\n            screenWidth: 0,\n          },\n        }\n      );\n\n    expect(await getEnrichedInstanceData(MOCKED_EXECUTOR, instanceOptions, false)).toMatchSnapshot();\n  });\n\n  it('should be able to enrich the instance data with all the defaults for iOS with shadow padding', async () => {\n    const instanceOptions = {\n      addressBarShadowPadding: 6,\n      toolBarShadowPadding: 6,\n      browserName: 'browserName',\n      browserVersion: 'browserVersion',\n      deviceName: 'deviceName',\n      logName: 'logName',\n      name: 'name',\n      nativeWebScreenshot: false,\n      platformName: 'iOS',\n      platformVersion: '12.4',\n    };\n    const MOCKED_EXECUTOR = jest.fn()\n    // getEnrichedInstanceData for: getScreenDimensions\n      .mockResolvedValueOnce(\n        {\n          body: {\n            offsetHeight: 0,\n            scrollHeight: 0,\n          },\n          html: {\n            clientHeight: 0,\n            clientWidth: 0,\n            offsetHeight: 0,\n            scrollHeight: 0,\n            scrollWidth: 0,\n          },\n          window: {\n            devicePixelRatio: 1,\n            innerHeight: 768,\n            innerWidth: 1024,\n            outerHeight: 768,\n            outerWidth: 1024,\n            screenHeight: 0,\n            screenWidth: 0,\n          },\n        }\n      );\n\n    expect(await getEnrichedInstanceData(MOCKED_EXECUTOR, instanceOptions, true)).toMatchSnapshot();\n  });\n});\n"]}