{"version":3,"file":"rectangles.spec.js","sourceRoot":"","sources":["../../lib/methods/rectangles.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  determineElementRectangles,\n  determineScreenRectangles,\n  determineStatusAddressToolBarRectangles\n} from './rectangles';\nimport {IMAGE_STRING} from '../mocks/mocks';\n\ndescribe('rectangles', () => {\n  describe('determineElementRectangles', () => {\n    it('should determine them for iOS', async () => {\n      const options = {\n        isAndroid: false,\n        devicePixelRatio: 2,\n        isAndroidNativeWebScreenshot: false,\n        innerHeight: 678,\n        isIos: true,\n      };\n      const MOCKED_EXECUTOR = jest.fn()\n        // getElementPositionIos for: getIosStatusAddressToolBarHeight\n        .mockResolvedValueOnce(\n          {\n            statusAddressBar: {\n              height: 94,\n              width: 375,\n              x: 0,\n              y: 0,\n            },\n            toolBar: {\n              height: 5,\n              width: 135,\n              x: 120,\n              y: 799,\n            },\n          })\n        // getElementPositionIos for: getElementPositionTopScreenNativeMobile\n        .mockResolvedValueOnce(\n          {\n            height: 120,\n            width: 120,\n            x: 100,\n            y: 10,\n          });\n\n      expect(await determineElementRectangles({\n        executor: MOCKED_EXECUTOR,\n        base64Image: IMAGE_STRING,\n        options,\n        element: 'element',\n      })).toMatchSnapshot();\n    });\n\n    it('should determine them for Android Native webscreenshot', async () => {\n      const options = {\n        isAndroid: true,\n        devicePixelRatio: 3,\n        isAndroidNativeWebScreenshot: true,\n        innerHeight: 678,\n        isIos: false,\n      };\n      const MOCKED_EXECUTOR = jest.fn()\n        // getElementPositionAndroid for: getAndroidStatusAddressToolBarHeight\n        .mockResolvedValueOnce(\n          {\n            statusAddressBar: {\n              height: 20,\n              width: 375,\n              x: 0,\n              y: 0,\n            },\n            toolBar: {\n              height: 5,\n              width: 135,\n              x: 120,\n              y: 799,\n            },\n          })\n        // getElementPositionIos for: getElementPositionTopScreenNativeMobile\n        .mockResolvedValueOnce(\n          {\n            height: 120,\n            width: 120,\n            x: 100,\n            y: 10,\n          });\n\n      expect(await determineElementRectangles({\n        executor: MOCKED_EXECUTOR,\n        base64Image: IMAGE_STRING,\n        options,\n        element: 'element',\n      })).toMatchSnapshot();\n    });\n\n    it('should determine them for Android ChromeDriver', async () => {\n      const options = {\n        isAndroid: true,\n        devicePixelRatio: 1,\n        isAndroidNativeWebScreenshot: false,\n        innerHeight: 678,\n        isIos: false,\n      };\n      const MOCKED_EXECUTOR = jest.fn()\n        // getElementPositionAndroid for: getElementPositionTopWindow\n        .mockResolvedValueOnce(\n          {\n            height: 20,\n            width: 375,\n            x: 0,\n            y: 0,\n          });\n\n      expect(await determineElementRectangles({\n        executor: MOCKED_EXECUTOR,\n        base64Image: IMAGE_STRING,\n        options,\n        element: 'element',\n      })).toMatchSnapshot();\n    });\n\n    it('should determine them for a desktop browser', async () => {\n      const options = {\n        isAndroid: false,\n        devicePixelRatio: 2,\n        isAndroidNativeWebScreenshot: false,\n        innerHeight: 500,\n        isIos: false,\n      };\n      const MOCKED_EXECUTOR = jest.fn()\n        // getElementPositionDesktop for: getElementPositionTopWindow\n        .mockResolvedValueOnce(\n          {\n            height: 20,\n            width: 375,\n            x: 12,\n            y: 34,\n          });\n\n      expect(await determineElementRectangles({\n        executor: MOCKED_EXECUTOR,\n        base64Image: IMAGE_STRING,\n        options,\n        element: 'element',\n      })).toMatchSnapshot();\n    });\n  });\n\n  describe('determineScreenRectangles', () => {\n    it('should determine them for iOS', async () => {\n      const options = {\n        innerHeight: 553,\n        innerWidth: 375,\n        isAndroidNativeWebScreenshot: false,\n        isAndroidChromeDriverScreenshot: false,\n        isIos: true,\n        devicePixelRatio: 2,\n      };\n\n      expect(await determineScreenRectangles(IMAGE_STRING, options)).toMatchSnapshot();\n    });\n\n    it('should determine them for Android ChromeDriver', async () => {\n      const options = {\n        innerHeight: 553,\n        innerWidth: 375,\n        isAndroidNativeWebScreenshot: false,\n        isAndroidChromeDriverScreenshot: true,\n        isIos: false,\n        devicePixelRatio: 2,\n      };\n\n      expect(await determineScreenRectangles(IMAGE_STRING, options)).toMatchSnapshot();\n    });\n\n    it('should determine them for Android Native webscreenshot', async () => {\n      const options = {\n        innerHeight: 553,\n        innerWidth: 375,\n        isAndroidNativeWebScreenshot: true,\n        isAndroidChromeDriverScreenshot: false,\n        isIos: false,\n        devicePixelRatio: 2,\n      };\n\n      expect(await determineScreenRectangles(IMAGE_STRING, options)).toMatchSnapshot();\n    });\n  });\n\n  describe('determineStatusAddressToolBarRectangles', () => {\n    it('should determine the rectangles for the iOS with a status and toolbar blockout', async () => {\n      const options = {\n        isHybridApp: false,\n        isMobile: true,\n        isViewPortScreenshot: true,\n        platformName: 'iOS',\n        isAndroidNativeWebScreenshot: false,\n        blockOutStatusBar: true,\n        blockOutToolBar: true,\n      };\n      const MOCKED_EXECUTOR = jest.fn()\n        // determineStatusAddressToolBarRectangles for: getIosStatusAddressToolBarHeight\n        .mockResolvedValueOnce(\n          {\n            statusAddressBar: {\n              height: 94,\n              width: 375,\n              x: 0,\n              y: 0,\n            },\n            toolBar: {\n              height: 5,\n              width: 135,\n              x: 120,\n              y: 799,\n            },\n          });\n\n      expect(await determineStatusAddressToolBarRectangles(MOCKED_EXECUTOR, options)).toMatchSnapshot();\n    });\n\n    it('should determine the rectangles for the iOS without a status and toolbar blockout', async () => {\n      const options = {\n        isHybridApp: false,\n        isMobile: true,\n        isViewPortScreenshot: true,\n        platformName: 'iOS',\n        isAndroidNativeWebScreenshot: false,\n        blockOutStatusBar: false,\n        blockOutToolBar: false,\n      };\n      const MOCKED_EXECUTOR = jest.fn()\n        // determineStatusAddressToolBarRectangles for: getIosStatusAddressToolBarHeight\n        .mockResolvedValueOnce(\n          {\n            statusAddressBar: {\n              height: 94,\n              width: 375,\n              x: 0,\n              y: 0,\n            },\n            toolBar: {\n              height: 5,\n              width: 135,\n              x: 0,\n              y: 799,\n            },\n          });\n\n      expect(await determineStatusAddressToolBarRectangles(MOCKED_EXECUTOR, options)).toMatchSnapshot();\n    });\n\n    it('should determine the rectangles for Android with a status and toolbar blockout', async () => {\n      const options = {\n        isHybridApp: false,\n        isMobile: true,\n        isViewPortScreenshot: true,\n        platformName: 'Android',\n        isAndroidNativeWebScreenshot: true,\n        blockOutStatusBar: true,\n        blockOutToolBar: true,\n      };\n      const MOCKED_EXECUTOR = jest.fn()\n        // determineStatusAddressToolBarRectangles for: getAndroidStatusAddressToolBarHeight\n        .mockResolvedValueOnce(\n          {\n            statusAddressBar: {\n              height: 40,\n              width: 320,\n              x: 0,\n              y: 0,\n            },\n            toolBar: {\n              height: 100,\n              width: 320,\n              x: 0,\n              y: 600,\n            },\n          });\n\n      expect(await determineStatusAddressToolBarRectangles(MOCKED_EXECUTOR, options)).toMatchSnapshot();\n    });\n\n    it('should determine the rectangles that there are no rectangles for this device', async () => {\n      const options = {\n        isHybridApp: false,\n        isMobile: true,\n        isViewPortScreenshot: false,\n        platformName: 'Android',\n        isAndroidNativeWebScreenshot: false,\n        blockOutStatusBar: false,\n        blockOutToolBar: false,\n      };\n      const MOCKED_EXECUTOR = jest.fn()\n        // determineStatusAddressToolBarRectangles for: getAndroidStatusAddressToolBarHeight\n        .mockResolvedValueOnce(\n          {\n            statusAddressBar: {\n              height: 40,\n              width: 320,\n              x: 0,\n              y: 0,\n            },\n            toolBar: {\n              height: 100,\n              width: 320,\n              x: 0,\n              y: 600,\n            },\n          });\n\n      expect(await determineStatusAddressToolBarRectangles(MOCKED_EXECUTOR, options)).toMatchSnapshot();\n    });\n  });\n});\n"]}