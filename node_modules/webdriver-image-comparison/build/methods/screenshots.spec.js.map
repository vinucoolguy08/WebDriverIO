{"version":3,"file":"screenshots.spec.js","sourceRoot":"","sources":["../../lib/methods/screenshots.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {getBase64FullPageScreenshotsData} from './screenshots';\nimport {FullPageScreenshotDataOptions} from './screenshots.interfaces';\nimport {IMAGE_STRING} from '../mocks/mocks';\nimport {LogLevel} from \"../helpers/options.interface\";\n\ndescribe('screenshots', () => {\n  describe('getBase64FullPageScreenshotsData', () => {\n    const MOCKED_TAKESCREENSHOT = jest.fn()\n      .mockResolvedValue(IMAGE_STRING);\n\n    it('should get the Android nativeWebScreenshot fullpage screenshot data', async () => {\n      const options: FullPageScreenshotDataOptions = {\n        addressBarShadowPadding: 6,\n        devicePixelRatio: 2,\n        fullPageScrollTimeout: 1,\n        innerHeight: 800,\n        isAndroid: true,\n        isAndroidNativeWebScreenshot: true,\n        isAndroidChromeDriverScreenshot: false,\n        isHybridApp: false,\n        isIos: false,\n        logLevel: LogLevel.debug,\n        toolBarShadowPadding: 6,\n        hideAfterFirstScroll: [],\n      };\n      const MOCKED_EXECUTOR = jest.fn()\n        // For await executor(getAndroidStatusAddressToolBarHeight, OFFSETS.ANDROID))\n        .mockResolvedValueOnce({statusAddressBar: {height: 56}})\n        // THIS NEEDS TO BE FIXED IN THE FUTURE\n        // getFullPageScreenshotsDataNativeMobile: For await executor(scrollToPosition, scrollY)\n        .mockResolvedValueOnce({})\n        // getFullPageScreenshotsDataNativeMobile: For await executor(hideScrollBars, true);\n        .mockResolvedValueOnce({})\n        // getFullPageScreenshotsDataNativeMobile: For await executor(getDocumentScrollHeight)\n        .mockResolvedValueOnce(788)\n        // getFullPageScreenshotsDataNativeMobile: For await executor(hideScrollBars, false);\n        .mockResolvedValueOnce({});\n\n      // Replace the screenshot with a `mocked-screenshot-string`;\n      const result = await getBase64FullPageScreenshotsData(MOCKED_TAKESCREENSHOT, MOCKED_EXECUTOR, options);\n      result.data.forEach(dataObject => dataObject.screenshot = 'mocked-screenshot-string');\n\n      expect(result).toMatchSnapshot();\n    });\n\n    it('should get hide elements for the Android nativeWebScreenshot fullpage screenshot', async () => {\n      const options: FullPageScreenshotDataOptions = {\n        addressBarShadowPadding: 6,\n        devicePixelRatio: 2,\n        fullPageScrollTimeout: 1,\n        innerHeight: 600,\n        isAndroid: true,\n        isAndroidNativeWebScreenshot: true,\n        isAndroidChromeDriverScreenshot: false,\n        isHybridApp: false,\n        isIos: false,\n        logLevel: LogLevel.debug,\n        toolBarShadowPadding: 6,\n        hideAfterFirstScroll: [<HTMLElement><unknown>'<div/>'],\n      };\n      const MOCKED_EXECUTOR = jest.fn()\n      // For await executor(getAndroidStatusAddressToolBarHeight, OFFSETS.ANDROID))\n        .mockResolvedValueOnce({statusAddressBar: {height: 56}})\n        // THIS NEEDS TO BE FIXED IN THE FUTURE\n        // getFullPageScreenshotsDataNativeMobile: For await executor(scrollToPosition, scrollY)\n        .mockResolvedValueOnce({})\n        // getFullPageScreenshotsDataNativeMobile: For await executor(hideScrollBars, true);\n        .mockResolvedValueOnce({})\n        // getFullPageScreenshotsDataNativeMobile: For await executor(getDocumentScrollHeight)\n        .mockResolvedValueOnce(788)\n        // getFullPageScreenshotsDataNativeMobile: For await executor(hideScrollBars, false);\n        .mockResolvedValueOnce({})\n        // RUN 2\n        // getFullPageScreenshotsDataNativeMobile: For await executor(scrollToPosition, scrollY)\n        .mockResolvedValueOnce({})\n        // getFullPageScreenshotsDataNativeMobile: For await executor(hideScrollBars, true);\n        .mockResolvedValueOnce({})\n        // getFullPageScreenshotsDataNativeMobile: For await executor(hideRemoveElements, {hide: hideAfterFirstScroll, remove: []}, true);\n        .mockResolvedValueOnce({})\n        // getFullPageScreenshotsDataNativeMobile: For await executor(getDocumentScrollHeight)\n        .mockResolvedValueOnce(788)\n        // getFullPageScreenshotsDataNativeMobile: For await executor(hideScrollBars, false);\n        .mockResolvedValueOnce({})\n        // getFullPageScreenshotsDataNativeMobile: For await executor(hideRemoveElements, {hide: hideAfterFirstScroll, remove: []}, false);\n        .mockResolvedValueOnce({});\n\n      // Replace the screenshot with a `mocked-screenshot-string`;\n      const result = await getBase64FullPageScreenshotsData(MOCKED_TAKESCREENSHOT, MOCKED_EXECUTOR, options);\n      result.data.forEach(dataObject => dataObject.screenshot = 'mocked-screenshot-string');\n\n      expect(result).toMatchSnapshot();\n    });\n\n    it('should get the Android ChromeDriver fullpage screenshot data', async () => {\n      const options: FullPageScreenshotDataOptions = {\n        addressBarShadowPadding: 6,\n        devicePixelRatio: 2,\n        fullPageScrollTimeout: 1,\n        innerHeight: 800,\n        isAndroid: true,\n        isAndroidNativeWebScreenshot: false,\n        isAndroidChromeDriverScreenshot: true,\n        isHybridApp: false,\n        isIos: false,\n        logLevel: LogLevel.debug,\n        toolBarShadowPadding: 6,\n        hideAfterFirstScroll: [],\n      };\n      const MOCKED_EXECUTOR = jest.fn()\n      // THIS NEEDS TO BE FIXED IN THE FUTURE\n      // getFullPageScreenshotsDataNativeMobile: For await executor(scrollToPosition, scrollY)\n        .mockResolvedValueOnce({})\n        // getFullPageScreenshotsDataNativeMobile: For await executor(hideScrollBars, true);\n        .mockResolvedValueOnce({})\n        // getFullPageScreenshotsDataNativeMobile: For await executor(getDocumentScrollHeight)\n        .mockResolvedValueOnce(1200)\n        // getFullPageScreenshotsDataNativeMobile: For await executor(hideScrollBars, false);\n        .mockResolvedValueOnce({})\n        // RUN 2\n        // getFullPageScreenshotsDataNativeMobile: For await executor(scrollToPosition, scrollY)\n        .mockResolvedValueOnce({})\n        // getFullPageScreenshotsDataNativeMobile: For await executor(hideScrollBars, true);\n        .mockResolvedValueOnce({})\n        // getFullPageScreenshotsDataNativeMobile: For await executor(getDocumentScrollHeight)\n        .mockResolvedValueOnce(1200)\n        // getFullPageScreenshotsDataNativeMobile: For await executor(hideScrollBars, false);\n        .mockResolvedValueOnce({});\n\n      // Replace the screenshot with a `mocked-screenshot-string`;\n      const result = await getBase64FullPageScreenshotsData(MOCKED_TAKESCREENSHOT, MOCKED_EXECUTOR, options);\n      result.data.forEach(dataObject => dataObject.screenshot = 'mocked-screenshot-string');\n\n      expect(result).toMatchSnapshot();\n    });\n\n    it('should hide elements for the Android ChromeDriver fullpage screenshot', async () => {\n      const options: FullPageScreenshotDataOptions = {\n        addressBarShadowPadding: 6,\n        devicePixelRatio: 2,\n        fullPageScrollTimeout: 1,\n        innerHeight: 800,\n        isAndroid: true,\n        isAndroidNativeWebScreenshot: false,\n        isAndroidChromeDriverScreenshot: true,\n        isHybridApp: false,\n        isIos: false,\n        logLevel: LogLevel.debug,\n        toolBarShadowPadding: 6,\n        hideAfterFirstScroll: [<HTMLElement><unknown>'<div/>'],\n      };\n      const MOCKED_EXECUTOR = jest.fn()\n      // THIS NEEDS TO BE FIXED IN THE FUTURE\n      // getFullPageScreenshotsDataNativeMobile: For await executor(scrollToPosition, scrollY)\n        .mockResolvedValueOnce({})\n        // getFullPageScreenshotsDataNativeMobile: For await executor(hideScrollBars, true);\n        .mockResolvedValueOnce({})\n        // getFullPageScreenshotsDataNativeMobile: For await executor(getDocumentScrollHeight)\n        .mockResolvedValueOnce(1200)\n        // getFullPageScreenshotsDataNativeMobile: For await executor(hideScrollBars, false);\n        .mockResolvedValueOnce({})\n        // RUN 2\n        // getFullPageScreenshotsDataNativeMobile: For await executor(scrollToPosition, scrollY)\n        .mockResolvedValueOnce({})\n        // getFullPageScreenshotsDataNativeMobile: For await executor(hideScrollBars, true);\n        .mockResolvedValueOnce({})\n        // getFullPageScreenshotsDataNativeMobile: For await executor(hideRemoveElements, {hide: hideAfterFirstScroll, remove: []}, true);\n        .mockResolvedValueOnce({})\n        // getFullPageScreenshotsDataNativeMobile: For await executor(getDocumentScrollHeight)\n        .mockResolvedValueOnce(1200)\n        // getFullPageScreenshotsDataNativeMobile: For await executor(hideScrollBars, false);\n        .mockResolvedValueOnce({})\n        // getFullPageScreenshotsDataNativeMobile: For await executor(hideRemoveElements, {hide: hideAfterFirstScroll, remove: []}, false);\n        .mockResolvedValueOnce({});\n\n      // Replace the screenshot with a `mocked-screenshot-string`;\n      const result = await getBase64FullPageScreenshotsData(MOCKED_TAKESCREENSHOT, MOCKED_EXECUTOR, options);\n      result.data.forEach(dataObject => dataObject.screenshot = 'mocked-screenshot-string');\n\n      expect(result).toMatchSnapshot();\n    });\n\n    it('should get the iOS fullpage screenshot data', async () => {\n      const options: FullPageScreenshotDataOptions = {\n        addressBarShadowPadding: 6,\n        devicePixelRatio: 2,\n        fullPageScrollTimeout: 1,\n        innerHeight: 800,\n        isAndroid: false,\n        isAndroidNativeWebScreenshot: false,\n        isAndroidChromeDriverScreenshot: false,\n        isHybridApp: false,\n        isIos: true,\n        logLevel: LogLevel.debug,\n        toolBarShadowPadding: 6,\n        hideAfterFirstScroll: [],\n      };\n      const MOCKED_EXECUTOR = jest.fn()\n        .mockResolvedValueOnce({statusAddressBar: {height: 94}})\n        // THIS NEEDS TO BE FIXED IN THE FUTURE\n        // getFullPageScreenshotsDataNativeMobile: For await executor(scrollToPosition, scrollY)\n        .mockResolvedValueOnce({})\n        // getFullPageScreenshotsDataNativeMobile: For await executor(hideScrollBars, true);\n        .mockResolvedValueOnce({})\n        // getFullPageScreenshotsDataNativeMobile: For await executor(getDocumentScrollHeight)\n        .mockResolvedValueOnce(1200)\n        // getFullPageScreenshotsDataNativeMobile: For await executor(hideScrollBars, false);\n        .mockResolvedValueOnce({})\n        // RUN 2\n        // getFullPageScreenshotsDataNativeMobile: For await executor(scrollToPosition, scrollY)\n        .mockResolvedValueOnce({})\n        // getFullPageScreenshotsDataNativeMobile: For await executor(hideScrollBars, true);\n        .mockResolvedValueOnce({})\n        // getFullPageScreenshotsDataNativeMobile: For await executor(getDocumentScrollHeight)\n        .mockResolvedValueOnce(1200)\n        // getFullPageScreenshotsDataNativeMobile: For await executor(hideScrollBars, false);\n        .mockResolvedValueOnce({});\n\n      // Replace the screenshot with a `mocked-screenshot-string`;\n      const result = await getBase64FullPageScreenshotsData(MOCKED_TAKESCREENSHOT, MOCKED_EXECUTOR, options);\n      result.data.forEach(dataObject => dataObject.screenshot = 'mocked-screenshot-string');\n\n      expect(result).toMatchSnapshot();\n    });\n\n    it('should hide elements for the iOS fullpage screenshot', async () => {\n      const options: FullPageScreenshotDataOptions = {\n        addressBarShadowPadding: 6,\n        devicePixelRatio: 2,\n        fullPageScrollTimeout: 1,\n        innerHeight: 800,\n        isAndroid: false,\n        isAndroidNativeWebScreenshot: false,\n        isAndroidChromeDriverScreenshot: false,\n        isHybridApp: false,\n        isIos: true,\n        logLevel: LogLevel.debug,\n        toolBarShadowPadding: 6,\n        hideAfterFirstScroll: [<HTMLElement><unknown>'<div/>'],\n      };\n      const MOCKED_EXECUTOR = jest.fn()\n        .mockResolvedValueOnce({statusAddressBar: {height: 94}})\n        // THIS NEEDS TO BE FIXED IN THE FUTURE\n        // getFullPageScreenshotsDataNativeMobile: For await executor(scrollToPosition, scrollY)\n        .mockResolvedValueOnce({})\n        // getFullPageScreenshotsDataNativeMobile: For await executor(hideScrollBars, true);\n        .mockResolvedValueOnce({})\n        // getFullPageScreenshotsDataNativeMobile: For await executor(getDocumentScrollHeight)\n        .mockResolvedValueOnce(1200)\n        // getFullPageScreenshotsDataNativeMobile: For await executor(hideScrollBars, false);\n        .mockResolvedValueOnce({})\n        // RUN 2\n        // getFullPageScreenshotsDataNativeMobile: For await executor(scrollToPosition, scrollY)\n        .mockResolvedValueOnce({})\n        // getFullPageScreenshotsDataNativeMobile: For await executor(hideScrollBars, true);\n        .mockResolvedValueOnce({})\n        // getFullPageScreenshotsDataNativeMobile: For await executor(hideRemoveElements, {hide: hideAfterFirstScroll, remove: []}, true);\n        .mockResolvedValueOnce({})\n        // getFullPageScreenshotsDataNativeMobile: For await executor(getDocumentScrollHeight)\n        .mockResolvedValueOnce(1200)\n        // getFullPageScreenshotsDataNativeMobile: For await executor(hideScrollBars, false);\n        .mockResolvedValueOnce({})\n        // getFullPageScreenshotsDataNativeMobile: For await executor(hideRemoveElements, {hide: hideAfterFirstScroll, remove: []}, false);\n        .mockResolvedValueOnce({});\n\n      // Replace the screenshot with a `mocked-screenshot-string`;\n      const result = await getBase64FullPageScreenshotsData(MOCKED_TAKESCREENSHOT, MOCKED_EXECUTOR, options);\n      result.data.forEach(dataObject => dataObject.screenshot = 'mocked-screenshot-string');\n\n      expect(result).toMatchSnapshot();\n    });\n\n    it('should get the desktop browser fullpage screenshot data', async () => {\n      const options: FullPageScreenshotDataOptions = {\n        addressBarShadowPadding: 6,\n        devicePixelRatio: 2,\n        fullPageScrollTimeout: 1,\n        innerHeight: 768,\n        isAndroid: false,\n        isAndroidNativeWebScreenshot: false,\n        isAndroidChromeDriverScreenshot: false,\n        isHybridApp: false,\n        isIos: false,\n        logLevel: LogLevel.debug,\n        toolBarShadowPadding: 6,\n        hideAfterFirstScroll: [],\n      };\n      const MOCKED_EXECUTOR = jest.fn()\n      // THIS NEEDS TO BE FIXED IN THE FUTURE\n      // getFullPageScreenshotsDataNativeMobile: For await executor(scrollToPosition, scrollY)\n        .mockResolvedValueOnce({})\n        // getFullPageScreenshotsDataNativeMobile: For await executor(getDocumentScrollHeight)\n        .mockResolvedValueOnce(3200)\n        // RUN 2\n        // getFullPageScreenshotsDataNativeMobile: For await executor(scrollToPosition, scrollY)\n        .mockResolvedValueOnce({})\n        // getFullPageScreenshotsDataNativeMobile: For await executor(getDocumentScrollHeight)\n        .mockResolvedValueOnce(3200)\n        // RUN 3\n        // getFullPageScreenshotsDataNativeMobile: For await executor(scrollToPosition, scrollY)\n        .mockResolvedValueOnce({})\n        // getFullPageScreenshotsDataNativeMobile: For await executor(getDocumentScrollHeight)\n        .mockResolvedValueOnce(3200)\n        // RUN 4\n        // getFullPageScreenshotsDataNativeMobile: For await executor(scrollToPosition, scrollY)\n        .mockResolvedValueOnce({})\n        // getFullPageScreenshotsDataNativeMobile: For await executor(getDocumentScrollHeight)\n        .mockResolvedValueOnce(3200)\n        // RUN 5\n        // getFullPageScreenshotsDataNativeMobile: For await executor(scrollToPosition, scrollY)\n        .mockResolvedValueOnce({})\n        // getFullPageScreenshotsDataNativeMobile: For await executor(getDocumentScrollHeight)\n        .mockResolvedValueOnce(3200);\n\n      // Replace the screenshot with a `mocked-screenshot-string`;\n      const result = await getBase64FullPageScreenshotsData(MOCKED_TAKESCREENSHOT, MOCKED_EXECUTOR, options);\n      result.data.forEach(dataObject => dataObject.screenshot = 'mocked-screenshot-string');\n\n      expect(result).toMatchSnapshot();\n    });\n\n    it('should hide elements for the desktop browser fullpage screenshot', async () => {\n      const options: FullPageScreenshotDataOptions = {\n        addressBarShadowPadding: 6,\n        devicePixelRatio: 2,\n        fullPageScrollTimeout: 1,\n        innerHeight: 768,\n        isAndroid: false,\n        isAndroidNativeWebScreenshot: false,\n        isAndroidChromeDriverScreenshot: false,\n        isHybridApp: false,\n        isIos: false,\n        logLevel: LogLevel.debug,\n        toolBarShadowPadding: 6,\n        hideAfterFirstScroll: [<HTMLElement><unknown>'<div/>'],\n      };\n      const MOCKED_EXECUTOR = jest.fn()\n      // THIS NEEDS TO BE FIXED IN THE FUTURE\n      // getFullPageScreenshotsDataNativeMobile: For await executor(scrollToPosition, scrollY)\n        .mockResolvedValueOnce({})\n        // getFullPageScreenshotsDataNativeMobile: For await executor(getDocumentScrollHeight)\n        .mockResolvedValueOnce(3200)\n        // RUN 2\n        // getFullPageScreenshotsDataNativeMobile: For await executor(scrollToPosition, scrollY)\n        .mockResolvedValueOnce({})\n        // getFullPageScreenshotsDataNativeMobile: For await executor(hideRemoveElements, {hide: hideAfterFirstScroll, remove: []}, true);\n        .mockResolvedValueOnce({})\n        // getFullPageScreenshotsDataNativeMobile: For await executor(getDocumentScrollHeight)\n        .mockResolvedValueOnce(3200)\n        // RUN 3\n        // getFullPageScreenshotsDataNativeMobile: For await executor(scrollToPosition, scrollY)\n        .mockResolvedValueOnce({})\n        // getFullPageScreenshotsDataNativeMobile: For await executor(getDocumentScrollHeight)\n        .mockResolvedValueOnce(3200)\n        // RUN 4\n        // getFullPageScreenshotsDataNativeMobile: For await executor(scrollToPosition, scrollY)\n        .mockResolvedValueOnce({})\n        // getFullPageScreenshotsDataNativeMobile: For await executor(getDocumentScrollHeight)\n        .mockResolvedValueOnce(3200)\n        // RUN 5\n        // getFullPageScreenshotsDataNativeMobile: For await executor(scrollToPosition, scrollY)\n        .mockResolvedValueOnce({})\n        // getFullPageScreenshotsDataNativeMobile: For await executor(getDocumentScrollHeight)\n        .mockResolvedValueOnce(3200)\n        // getFullPageScreenshotsDataNativeMobile: For await executor(hideRemoveElements, {hide: hideAfterFirstScroll, remove: []}, false);\n        .mockResolvedValueOnce({});\n\n      // Replace the screenshot with a `mocked-screenshot-string`;\n      const result = await getBase64FullPageScreenshotsData(MOCKED_TAKESCREENSHOT, MOCKED_EXECUTOR, options);\n      result.data.forEach(dataObject => dataObject.screenshot = 'mocked-screenshot-string');\n\n      expect(result).toMatchSnapshot();\n    });\n  });\n});\n"]}