{"version":3,"file":"images.interfaces.js","sourceRoot":"","sources":["../../lib/methods/images.interfaces.ts"],"names":[],"mappings":"","sourcesContent":["import {RectanglesOutput} from './rectangles.interfaces';\nimport {LogLevel} from \"../helpers/options.interface\";\nimport {DEFAULT_RESIZE_DIMENSIONS} from \"../helpers/constants\";\n\nexport interface ResizeDimensions {\n  // The bottom margin\n  bottom: number;\n  // The left margin\n  left: number;\n  // The right margin\n  right: number;\n  // The top margin\n  top: number;\n}\n\nexport interface ImageCompareOptions {\n  // The device pixel ratio of the device\n  devicePixelRatio: number;\n  // The compare options\n  compareOptions: {\n    wic: WicImageCompareOptions;\n    method: ScreenMethodImageCompareCompareOptions;\n  };\n  // The name of the file\n  fileName: string;\n  // The folders object\n  folderOptions: ImageCompareFolderOptions;\n  // Is it an hybrid app or not\n  isHybridApp: boolean;\n  // Level to show logs\n  logLevel: LogLevel;\n  // The name of the platform\n  platformName: string;\n  // If this is a native web screenshot\n  isAndroidNativeWebScreenshot: boolean;\n}\n\nexport interface WicImageCompareOptions {\n  // Block out the status bar yes or no\n  blockOutStatusBar: boolean;\n  // Block out the tool bar yes or no\n  blockOutToolBar: boolean;\n  // Compare images and discard alpha\n  ignoreAlpha: boolean;\n  // Compare images an discard anti aliasing\n  ignoreAntialiasing: boolean;\n  // Even though the images are in colour, the comparison wil compare 2 black/white images\n  ignoreColors: boolean;\n  // Compare images and compare with red = 16, green = 16, blue = 16,alpha = 16, minBrightness=16, maxBrightness=240\n  ignoreLess: boolean;\n  // Compare images and compare with red = 0, green = 0, blue = 0, alpha = 0, minBrightness=0, maxBrightness=255\n  ignoreNothing: boolean;\n  // Default false. If true, return percentage will be like 0.12345678, default is 0.12\n  rawMisMatchPercentage: boolean;\n  // Return all the compare data object\n  returnAllCompareData: boolean;\n  // Allowable value of misMatchPercentage that prevents saving image with differences\n  saveAboveTolerance: number;\n}\n\nexport interface DefaultImageCompareCompareOptions extends MethodImageCompareCompareOptions {\n  // Block out array with x, y, width and height values\n  blockOut?: RectanglesOutput[];\n}\n\nexport interface ScreenMethodImageCompareCompareOptions extends DefaultImageCompareCompareOptions, MethodImageCompareCompareOptions {\n  // Block out the status bar yes or no\n  blockOutStatusBar?: boolean;\n  // Block out the tool bar yes or no\n  blockOutToolBar?: boolean;\n}\n\nexport interface MethodImageCompareCompareOptions {\n  // Block out array with x, y, width and height values\n  blockOut?: RectanglesOutput[];\n  // Compare images and discard alpha\n  ignoreAlpha?: boolean;\n  // Compare images an discard anti aliasing\n  ignoreAntialiasing?: boolean;\n  // Even though the images are in colour, the comparison wil compare 2 black/white images\n  ignoreColors?: boolean;\n  // Compare images and compare with red = 16, green = 16, blue = 16,alpha = 16, minBrightness=16, maxBrightness=240\n  ignoreLess?: boolean;\n  // Compare images and compare with red = 0, green = 0, blue = 0, alpha = 0, minBrightness=0, maxBrightness=255\n  ignoreNothing?: boolean;\n  // Default false. If true, return percentage will be like 0.12345678, default is 0.12\n  rawMisMatchPercentage?: boolean;\n  // Return all the compare data object\n  returnAllCompareData?: boolean;\n  // Allowable value of misMatchPercentage that prevents saving image with differences\n  saveAboveTolerance?: number;\n  //Scale images to same size before comparison\n  scaleImagesToSameSize?: boolean;\n}\n\nexport interface ImageCompareFolderOptions {\n  // Auto save image to baseline\n  autoSaveBaseline: boolean;\n  // The actual folder\n  actualFolder: string;\n  // The baseline folder\n  baselineFolder: any;\n  // The name of the browser\n  browserName: string;\n  // The name of the device\n  deviceName: string;\n  // The diff folder\n  diffFolder: string;\n  // Is the instance a mobile instance\n  isMobile: boolean;\n  // If the folder needs to have the instance name in it\n  savePerInstance: boolean;\n}\n\nexport interface ImageCompareResult {\n  // The file name\n  fileName: string;\n  folders: {\n    // The actual folder and file name\n    actual: string;\n    // The baseline folder and file name\n    baseline: string;\n    // This following folder is optional and only if there is a mismatch\n    // The folder that holds the diffs and the file name\n    diff?: string;\n  };\n  // The mismatch percentage\n  misMatchPercentage: number;\n}\n\nexport interface CompareOptions {\n  ignore: string[];\n  output?: {\n    ignoredBoxes?: IgnoreBoxes[]\n  };\n  scaleToSameSize?: boolean;\n}\n\nexport interface IgnoreBoxes {\n  bottom: number;\n  right: number;\n  left: number;\n  top: number;\n}\n\nexport interface CroppedBase64Image {\n  base64Image: string;\n  rectangles: RectanglesOutput;\n  logLevel: LogLevel;\n  resizeDimensions?: number | ResizeDimensions;\n}\n"]}