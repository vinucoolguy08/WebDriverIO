{"version":3,"file":"images.js","sourceRoot":"","sources":["../../lib/methods/images.ts"],"names":[],"mappings":"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","sourcesContent":["import {red, yellow} from 'chalk';\nimport {access, copySync, outputFile, readFileSync} from 'fs-extra';\nimport {join} from 'path';\nimport compareImages from '../resemble/compareImages';\nimport {calculateDprData, getAndCreatePath, getScreenshotSize} from '../helpers/utils';\nimport {DEFAULT_RESIZE_DIMENSIONS} from '../helpers/constants';\nimport {determineStatusAddressToolBarRectangles} from './rectangles';\nimport {RectanglesOutput} from './rectangles.interfaces';\nimport {\n  CompareOptions, CroppedBase64Image,\n  IgnoreBoxes,\n  ImageCompareOptions,\n  ImageCompareResult,\n  ResizeDimensions\n} from './images.interfaces';\nimport {FullPageScreenshotsData} from './screenshots.interfaces';\nimport {Executor} from './methods.interface';\nimport {CompareData} from '../resemble/compare.interfaces';\nimport {LogLevel} from \"../helpers/options.interface\";\n\nconst {createCanvas, loadImage} = require('canvas');\n\n/**\n * Check if the image exists and create a new baseline image if needed\n */\nexport async function checkBaselineImageExists(\n  actualFilePath: string,\n  baselineFilePath: string,\n  autoSaveBaseline: boolean,\n  logLevel: LogLevel,\n): Promise<void> {\n  return new Promise((resolve, reject) => {\n    access(baselineFilePath, error => {\n      if (error) {\n        if (autoSaveBaseline) {\n          try {\n            copySync(actualFilePath, baselineFilePath);\n            if (logLevel === LogLevel.info) {\n              console.log(yellow(`\n#####################################################################################\n INFO:\n Autosaved the image to\n ${baselineFilePath}\n#####################################################################################\n`));\n            }\n          } catch (error) {\n            /* istanbul ignore next */\n            reject(red(`\n#####################################################################################\n Image could not be copied. The following error was thrown:\n ${error}\n#####################################################################################\n`));\n          }\n        } else {\n          reject(red(`\n#####################################################################################\n Baseline image not found, save the actual image manually to the baseline.\n The image can be found here:\n ${actualFilePath}\n If you want the module to auto save a non existing image to the baseline you\n can provide 'autoSaveBaseline: true' to the options.\n#####################################################################################\n`));\n        }\n      }\n      resolve();\n    });\n  });\n}\n\n/**\n * Make a cropped image with Canvas\n */\nexport async function makeCroppedBase64Image({\n                                               base64Image,\n                                               rectangles,\n                                               logLevel,\n                                               resizeDimensions = DEFAULT_RESIZE_DIMENSIONS,\n                                             }: CroppedBase64Image): Promise<string> {\n  /**\n   * This is in for backwards compatibility, it will be removed in the future\n   */\n  let resizeValues;\n  if (typeof resizeDimensions === 'number') {\n    resizeValues = {\n      top: resizeDimensions,\n      right: resizeDimensions,\n      bottom: resizeDimensions,\n      left: resizeDimensions,\n    };\n    if (logLevel === LogLevel.debug || logLevel === LogLevel.warn) {\n      console.log(yellow(`\n#####################################################################################\n WARNING:\n THE 'resizeDimensions' NEEDS TO BE AN OBJECT LIKE\n {\n    top: 10,\n    right: 20,\n    bottom: 15,\n    left: 25,\n }\n NOW IT WILL BE DEFAULTED TO\n  {\n    top: ${resizeDimensions},\n    right: ${resizeDimensions},\n    bottom: ${resizeDimensions},\n    left: ${resizeDimensions},\n }\n THIS IS DEPRACATED AND WILL BE REMOVED IN A NEW MAJOR RELEASE\n#####################################################################################\n`));\n    }\n  } else {\n    resizeValues = resizeDimensions;\n  }\n\n  const {top, right, bottom, left} = {...DEFAULT_RESIZE_DIMENSIONS, ...resizeValues};\n  const {height, width, x, y} = rectangles;\n  const canvasWidth = width + left + right;\n  const canvasHeight = height + top + bottom;\n  const canvas = createCanvas(canvasWidth, canvasHeight);\n  const image = await loadImage(`data:image/png;base64,${base64Image}`);\n  const ctx = canvas.getContext('2d');\n\n  let sourceXStart = x - left;\n  let sourceYStart = y - top;\n\n  if (sourceXStart < 0) {\n    if (logLevel === LogLevel.debug || logLevel === LogLevel.warn) {\n      console.log(yellow(`\n#####################################################################################\n THE RESIZE DIMENSION LEFT '${left}' MADE THE CROPPING GO OUT OF\n THE IMAGE BOUNDARIES RESULTING IN AN IMAGE STARTPOSITION '${sourceXStart}'.\n THIS HAS BEEN DEFAULTED TO '0'\n#####################################################################################\n`));\n    }\n    sourceXStart = 0;\n  }\n\n  if (sourceYStart < 0) {\n    if (logLevel === LogLevel.debug || logLevel === LogLevel.warn) {\n      console.log(yellow(`\n#####################################################################################\n THE RESIZE DIMENSION LEFT '${top}' MADE THE CROPPING GO OUT OF\n THE IMAGE BOUNDARIES RESULTING IN AN IMAGE STARTPOSITION '${sourceYStart}'.\n THIS HAS BEEN DEFAULTED TO '0'\n#####################################################################################\n`));\n    }\n    sourceYStart = 0;\n  }\n\n  ctx.drawImage(image,\n    // Start at x/y pixels from the left and the top of the image (crop)\n    sourceXStart, sourceYStart,\n    // 'Get' a (w * h) area from the source image (crop)\n    canvasWidth, canvasHeight,\n    // Place the result at 0, 0 in the canvas,\n    0, 0,\n    // With as width / height: 100 * 100 (scale)\n    canvasWidth, canvasHeight\n  );\n\n  return canvas.toDataURL().replace(/^data:image\\/png;base64,/, '');\n}\n\n/**\n * Execute the image compare\n */\nexport async function executeImageCompare(\n  executor: Executor,\n  options: ImageCompareOptions,\n  isViewPortScreenshot: boolean = false,\n): Promise<ImageCompareResult | number> {\n\n  // 1. Set some variables\n  const {devicePixelRatio, fileName, isAndroidNativeWebScreenshot, isHybridApp, logLevel, platformName} = options;\n  const {\n    actualFolder,\n    autoSaveBaseline,\n    baselineFolder,\n    browserName,\n    deviceName,\n    diffFolder,\n    isMobile,\n    savePerInstance,\n  } = options.folderOptions;\n  let diffFilePath;\n  const imageCompareOptions = {...options.compareOptions.wic, ...options.compareOptions.method};\n\n  // 2. \tCreate all needed folders\n  const createFolderOptions = {browserName, deviceName, isMobile, savePerInstance};\n  const actualFolderPath = getAndCreatePath(actualFolder, createFolderOptions);\n  const baselineFolderPath = getAndCreatePath(baselineFolder, createFolderOptions);\n  const actualFilePath = join(actualFolderPath, fileName);\n  const baselineFilePath = join(baselineFolderPath, fileName);\n\n  // 3. \tCheck if there is a baseline image, and determine if it needs to be auto saved or not\n  await checkBaselineImageExists(actualFilePath, baselineFilePath, autoSaveBaseline, logLevel);\n\n  // 4. \tPrepare the compare\n  // 4a.\tDetermine the ignore options\n  const resembleIgnoreDefaults = ['alpha', 'antialiasing', 'colors', 'less', 'nothing'];\n  const ignore = resembleIgnoreDefaults.filter(option =>\n    Object.keys(imageCompareOptions).find(key =>\n      // @ts-ignore\n      key.toLowerCase().includes(option) && imageCompareOptions[key]\n    ));\n\n  // 4b.\tDetermine the ignore rectangles for the blockouts\n  const blockOut = 'blockOut' in imageCompareOptions ? imageCompareOptions.blockOut : [];\n  const statusAddressToolBarOptions = {\n    isHybridApp,\n    isMobile,\n    isViewPortScreenshot,\n    platformName,\n    isAndroidNativeWebScreenshot,\n    blockOutStatusBar: imageCompareOptions.blockOutStatusBar,\n    blockOutToolBar: imageCompareOptions.blockOutToolBar,\n  };\n\n  const ignoredBoxes = blockOut.concat(\n    // 4c.\tAdd the mobile rectangles that need to be ignored\n    await determineStatusAddressToolBarRectangles(executor, statusAddressToolBarOptions)\n  ).map(\n    // 4d.\tMake sure all the rectangles are equal to the dpr for the screenshot\n    rectangles => {\n      return calculateDprData({\n        // Adjust for the ResembleJS API\n        bottom: rectangles.y + rectangles.height,\n        right: rectangles.x + rectangles.width,\n        left: rectangles.x,\n        top: rectangles.y,\n      }, devicePixelRatio);\n    }\n  );\n\n  const compareOptions: CompareOptions = {\n    ignore,\n    ...(ignoredBoxes.length > 0 ? {output: {ignoredBoxes}} : {}),\n    scaleToSameSize: imageCompareOptions.scaleImagesToSameSize,\n  };\n\n  // 5.\t\tExecute the compare and retrieve the data\n  const data: CompareData = await compareImages(readFileSync(baselineFilePath), readFileSync(actualFilePath), compareOptions);\n  const misMatchPercentage = imageCompareOptions.rawMisMatchPercentage\n    ? data.rawMisMatchPercentage\n    : Number(data.rawMisMatchPercentage.toFixed(2));\n\n  // 6.\t\tSave the diff when there is a diff or when debug mode is on\n  if (misMatchPercentage > imageCompareOptions.saveAboveTolerance || logLevel === LogLevel.debug) {\n    const isDifference = misMatchPercentage > imageCompareOptions.saveAboveTolerance;\n    const isDifferenceMessage = 'WARNING:\\n There was a difference. Saved the difference to';\n    const debugMessage = 'INFO:\\n Debug mode is enabled. Saved the debug file to:';\n    const diffFolderPath = getAndCreatePath(diffFolder, createFolderOptions);\n    diffFilePath = join(diffFolderPath, fileName);\n\n    await saveBase64Image(\n      await addBlockOuts(Buffer.from(data.getBuffer()).toString('base64'), ignoredBoxes),\n      diffFilePath,\n    );\n\n    if (logLevel === LogLevel.debug || logLevel === LogLevel.warn) {\n      console.log(yellow(`\n#####################################################################################\n ${isDifference ? isDifferenceMessage : debugMessage}\n ${diffFilePath}\n#####################################################################################\n`));\n    }\n  }\n\n  // 7. \tReturn the comparison data\n  return imageCompareOptions.returnAllCompareData ? {\n    fileName,\n    folders: {\n      actual: actualFilePath,\n      baseline: baselineFilePath,\n      ...(diffFilePath ? {diff: diffFilePath} : {}),\n    },\n    misMatchPercentage,\n  } : misMatchPercentage;\n}\n\n/**\n * Make a full page image with Canvas\n */\nexport async function makeFullPageBase64Image(screenshotsData: FullPageScreenshotsData): Promise<string> {\n  const amountOfScreenshots = screenshotsData.data.length;\n  const {fullPageHeight: canvasHeight, fullPageWidth: canvasWidth} = screenshotsData;\n  const canvas = createCanvas(canvasWidth, canvasHeight);\n  const ctx = canvas.getContext('2d');\n\n  // Load all the images\n  for (let i = 0; i < amountOfScreenshots; i++) {\n    const {canvasYPosition, imageHeight, imageWidth, imageYPosition} = screenshotsData.data[i];\n    const image = await loadImage(`data:image/png;base64,${screenshotsData.data[i].screenshot}`);\n\n    ctx.drawImage(image,\n      // Start at x/y pixels from the left and the top of the image (crop)\n      0, imageYPosition,\n      // 0, 0,\n      // 'Get' a (w * h) area from the source image (crop)\n      imageWidth, imageHeight,\n      // Place the result at 0, 0 in the canvas,\n      0, canvasYPosition,\n      // With as width / height: 100 * 100 (scale)\n      imageWidth, imageHeight,\n    );\n  }\n\n  return canvas.toDataURL().replace(/^data:image\\/png;base64,/, '');\n}\n\n/**\n * Save the base64 image to a file\n */\nexport async function saveBase64Image(base64Image: string, filePath: string): Promise<void> {\n  return outputFile(filePath, base64Image, 'base64');\n}\n\n/**\n * Create a canvas with the ignore boxes if they are present\n */\nexport async function addBlockOuts(screenshot: string, ignoredBoxes: IgnoreBoxes[]): Promise<string> {\n  // Create canvas and load image\n  const {height, width} = getScreenshotSize(screenshot);\n  const canvas = createCanvas(width, height);\n  const image = await loadImage(`data:image/png;base64,${screenshot}`);\n  const canvasContext = canvas.getContext('2d');\n\n  // Draw the image on canvas\n  canvasContext.drawImage(\n    image,\n    // Start at x/y pixels from the left and the top of the image (crop)\n    0, 0,\n    // 'Get' a (w * h) area from the source image (crop)\n    width, height,\n    // Place the result at 0, 0 in the canvas,\n    0, 0,\n    // With as width / height: 100 * 100 (scale)\n    width, height,\n  );\n\n  // Loop over all ignored areas and add them to the current canvas\n  ignoredBoxes.forEach(ignoredBox => {\n    const {right: ignoredBoxWidth, bottom: ignoredBoxHeight, left: x, top: y} = ignoredBox;\n    const ignoreCanvas = createCanvas(ignoredBoxWidth - x, ignoredBoxHeight - y);\n    const ignoreContext = ignoreCanvas.getContext('2d');\n\n    // Add a background color to the ignored box\n    ignoreContext.globalAlpha = 0.5;\n    ignoreContext.fillStyle = '#39aa56';\n    ignoreContext.fillRect(0, 0, ignoredBoxWidth - x, ignoredBoxHeight - y);\n\n    // add to canvasContext\n    canvasContext.drawImage(ignoreCanvas, x, y);\n  });\n\n  // Return the screenshot\n  return canvas.toDataURL().replace(/^data:image\\/png;base64,/, '');\n}\n"]}