{"version":3,"file":"getDocumentScrollHeight.js","sourceRoot":"","sources":["../../lib/clientSideScripts/getDocumentScrollHeight.ts"],"names":[],"mappings":";;AAGA,SAAwB,uBAAuB;IAC7C,IAAM,cAAc,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,eAAe,CAAC,YAAY,EAAE,MAAM,CAAC,WAAW,IAAI,CAAC,CAAC,CAAC;IAChG,IAAM,YAAY,GAAG,QAAQ,CAAC,eAAe,CAAC,YAAY,CAAC;IAC3D,IAAM,gBAAgB,GAAG,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC;IAIpD,IAAI,CAAC,cAAc,KAAK,YAAY,CAAC,IAAI,CAAC,gBAAgB,GAAG,YAAY,CAAC,EAAE;QAC1E,OAAO,gBAAgB,CAAC;KACzB;IAMD,IAAI,UAAU,GAAG,CAAC,CAAC;IACnB,IAAI,kBAAkB,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;IAExD,IAAI,gBAAgB,KAAK,YAAY,IAAI,gBAAgB,KAAK,cAAc,EAAE;QAC5E,eAAe,CAAC,QAAQ,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;QAKrD,OAAO,UAAU,GAAG,kBAAkB,CAAC,qBAAqB,EAAE,CAAC,GAAG,CAAC;KACpE;IAGD,OAAO,YAAY,CAAC;IAMpB,SAAS,eAAe,CAAC,SAAc;QACrC,KAAK,IAAI,CAAC,GAAG,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;YAC9C,IAAM,WAAW,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;YAGjC,IAAI,WAAW,CAAC,YAAY,IAAI,WAAW,CAAC,YAAY,EAAE;gBACxD,IAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,YAAY,EAAE,WAAW,CAAC,YAAY,CAAC,CAAC;gBAC9E,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;gBAC5C,IAAI,QAAQ,KAAK,UAAU,EAAE;oBAC3B,kBAAkB,GAAG,WAAW,CAAC;iBAClC;aACF;YAED,IAAI,WAAW,CAAC,UAAU,CAAC,MAAM,EAAE;gBACjC,eAAe,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;aACzC;SACF;IACH,CAAC;AACH,CAAC;AApDD,0CAoDC","sourcesContent":["/**\n * Get the document scroll height, this means the actual height of the page from the top to the bottom of the DOM\n */\nexport default function getDocumentScrollHeight(): number {\n  const viewPortHeight = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);\n  const scrollHeight = document.documentElement.scrollHeight;\n  const bodyScrollHeight = document.body.scrollHeight;\n\n  // In some situations the default scrollheight can be equal to the viewport height\n  // but the body scroll height can be different, then return that one\n  if ((viewPortHeight === scrollHeight) && (bodyScrollHeight > scrollHeight)) {\n    return bodyScrollHeight;\n  }\n\n  // In some cases we can have a challenge determining the height of the page\n  // due to for example a `vh` property on the body element.\n  // If that is the case we need to walk over all the elements and determine the highest element\n  // this is a very time consuming thing, so our last hope :(\n  let pageHeight = 0;\n  let largestNodeElement = document.querySelector('body');\n\n  if (bodyScrollHeight === scrollHeight && bodyScrollHeight === viewPortHeight) {\n    findHighestNode(document.documentElement.childNodes);\n\n    // There could be some elements above this largest element,\n    // add that on top\n    /* istanbul ignore next */\n    return pageHeight + largestNodeElement.getBoundingClientRect().top;\n  }\n\n  // The scrollHeight is good enough\n  return scrollHeight;\n\n  /**\n   * Find the largest html element on the page\n   * @param nodesList\n   */\n  function findHighestNode(nodesList: any) {\n    for (let i = nodesList.length - 1; i >= 0; i--) {\n      const currentNode = nodesList[i];\n\n      /* istanbul ignore next */\n      if (currentNode.scrollHeight && currentNode.clientHeight) {\n        const elHeight = Math.max(currentNode.scrollHeight, currentNode.clientHeight);\n        pageHeight = Math.max(elHeight, pageHeight);\n        if (elHeight === pageHeight) {\n          largestNodeElement = currentNode;\n        }\n      }\n\n      if (currentNode.childNodes.length) {\n        findHighestNode(currentNode.childNodes);\n      }\n    }\n  }\n}\n"]}