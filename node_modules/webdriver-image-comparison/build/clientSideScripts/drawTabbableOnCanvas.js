"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function drawTabbableOnCanvas(drawOptions) {
    window.scrollTo(0, 0);
    var width = window.innerWidth;
    var height = getDocumentScrollHeight();
    var canvasNode = "<canvas id=\"wic-tabbable-canvas\" width=\"".concat(width, "\" height=\"").concat(height, "\" style=\"position:absolute;top:0;left:0;z-index:999999;\">");
    document.body.insertAdjacentHTML('afterbegin', canvasNode);
    var accessibleElements = tabbable();
    var elementCoordinates = accessibleElements.map(function (node) {
        var currentElement = node.getBoundingClientRect();
        return {
            x: currentElement.left + (currentElement.width / 2),
            y: currentElement.top + (currentElement.height / 2),
        };
    });
    elementCoordinates.unshift({ x: 0, y: 0 });
    elementCoordinates.forEach(function (elementCoordinate, i) {
        if (i === 0) {
            return;
        }
        drawLine(drawOptions.line, elementCoordinates[i - 1], elementCoordinate);
        drawCircleAndNumber(drawOptions.circle, elementCoordinate, i);
    });
    function drawLine(options, start, end) {
        var tabbableCanvasContext = document.getElementById('wic-tabbable-canvas').getContext('2d');
        tabbableCanvasContext.beginPath();
        tabbableCanvasContext.globalCompositeOperation = 'destination-over';
        tabbableCanvasContext.lineWidth = options.width;
        tabbableCanvasContext.strokeStyle = options.color;
        tabbableCanvasContext.moveTo(start.x, start.y);
        tabbableCanvasContext.lineTo(end.x, end.y);
        tabbableCanvasContext.stroke();
    }
    function drawCircleAndNumber(options, position, i) {
        var tabbableCanvasContext = document.getElementById('wic-tabbable-canvas').getContext('2d');
        tabbableCanvasContext.beginPath();
        tabbableCanvasContext.globalCompositeOperation = 'source-over';
        tabbableCanvasContext.fillStyle = options.backgroundColor;
        tabbableCanvasContext.arc(position.x, position.y, options.size, 0, Math.PI * 2, true);
        tabbableCanvasContext.fill();
        tabbableCanvasContext.lineWidth = options.borderWidth;
        tabbableCanvasContext.strokeStyle = options.borderColor;
        tabbableCanvasContext.stroke();
        if (options.showNumber) {
            tabbableCanvasContext.font = "".concat(options.fontSize, "px ").concat(options.fontFamily);
            tabbableCanvasContext.textAlign = 'center';
            tabbableCanvasContext.textBaseline = 'middle';
            tabbableCanvasContext.fillStyle = options.fontColor;
            tabbableCanvasContext.fillText(i.toString(), position.x, position.y);
        }
    }
    function tabbable() {
        var regularTabbables = [];
        var orderedTabbables = [];
        var candidateSelectors = [
            'input',
            'select',
            'textarea',
            'a[href]',
            'button',
            '[tabindex]',
            'audio[controls]',
            'video[controls]',
            '[contenteditable]:not([contenteditable="false"])',
        ].join(',');
        var candidates = document.querySelectorAll(candidateSelectors);
        for (var i = 0; i < candidates.length; i++) {
            var candidate = candidates[i];
            if (!isNodeMatchingSelectorTabbable(candidate)) {
                continue;
            }
            var candidateTabindex = getTabindex(candidate);
            if (candidateTabindex === 0) {
                regularTabbables.push(candidate);
            }
            else {
                orderedTabbables.push({
                    documentOrder: i,
                    tabIndex: candidateTabindex,
                    node: candidate,
                });
            }
        }
        return Array.prototype.slice.call(orderedTabbables.sort(sortOrderedTabbables).map(function (a) { return a.node; }).concat(regularTabbables));
    }
    function isNodeMatchingSelectorTabbable(node) {
        return !(!isNodeMatchingSelectorFocusable(node) ||
            isNonTabbableRadio(node) ||
            getTabindex(node) < 0);
    }
    function isNodeMatchingSelectorFocusable(node) {
        return !((node.hasAttribute('disabled') || node.getAttribute('disabled'))
            || isHiddenInput(node)
            || isHidden(node));
    }
    function getTabindex(node) {
        var tabindexAttr = parseInt(node.getAttribute('tabindex'), 10);
        if (!isNaN(tabindexAttr)) {
            return tabindexAttr;
        }
        if (isContentEditable(node)) {
            return 0;
        }
        return node.tabIndex;
    }
    function sortOrderedTabbables(nodeA, nodeB) {
        return nodeA.tabIndex === nodeB.tabIndex
            ? nodeA.documentOrder - nodeB.documentOrder
            : nodeA.tabIndex - nodeB.tabIndex;
    }
    function isContentEditable(node) {
        return node.contentEditable === 'true';
    }
    function isInput(node) {
        return node.tagName === 'INPUT';
    }
    function isHiddenInput(node) {
        return isInput(node) && node.type === 'hidden';
    }
    function isRadio(node) {
        return isInput(node) && node.type === 'radio';
    }
    function isNonTabbableRadio(node) {
        return isRadio(node) && !isTabbableRadio(node);
    }
    function getCheckedRadio(nodes) {
        for (var i = 0; i < nodes.length; i++) {
            if (nodes[i].checked) {
                return nodes[i];
            }
        }
    }
    function isTabbableRadio(node) {
        if (!node.name) {
            return true;
        }
        var radioSet = node.ownerDocument.querySelectorAll("input[type=\"radio\"][name=\"".concat(node.name, "\"]"));
        var checked = getCheckedRadio(radioSet);
        return !checked || checked === node;
    }
    function isHidden(node) {
        return (node.offsetParent === null || getComputedStyle(node).visibility === 'hidden');
    }
    function getDocumentScrollHeight() {
        var viewPortHeight = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
        var scrollHeight = document.documentElement.scrollHeight;
        var bodyScrollHeight = document.body.scrollHeight;
        if ((viewPortHeight === scrollHeight) && (bodyScrollHeight > scrollHeight)) {
            return bodyScrollHeight;
        }
        var pageHeight = 0;
        var largestNodeElement = document.querySelector('body');
        if (bodyScrollHeight === scrollHeight && bodyScrollHeight === viewPortHeight) {
            findHighestNode(document.documentElement.childNodes);
            return pageHeight + largestNodeElement.getBoundingClientRect().top;
        }
        return scrollHeight;
        function findHighestNode(nodesList) {
            for (var i = nodesList.length - 1; i >= 0; i--) {
                var currentNode = nodesList[i];
                if (currentNode.scrollHeight && currentNode.clientHeight) {
                    var elHeight = Math.max(currentNode.scrollHeight, currentNode.clientHeight);
                    pageHeight = Math.max(elHeight, pageHeight);
                    if (elHeight === pageHeight) {
                        largestNodeElement = currentNode;
                    }
                }
                if (currentNode.childNodes.length) {
                    findHighestNode(currentNode.childNodes);
                }
            }
        }
    }
}
exports.default = drawTabbableOnCanvas;
//# sourceMappingURL=drawTabbableOnCanvas.js.map