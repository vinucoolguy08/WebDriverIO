"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function hideRemoveElements(hideRemoveElements, hideRemove) {
    var visitedSelectors = {};
    hideRemoveElements.hide.forEach(function (element) {
        if (Array.isArray(element)) {
            return element.forEach(function (singleElement) { return hideRemoveEl(singleElement, 'visibility', hideRemove); });
        }
        hideRemoveEl(element, 'visibility', hideRemove, true);
    });
    hideRemoveElements.remove.forEach(function (element) {
        if (Array.isArray(element)) {
            return element.forEach(function (singleElement) { return hideRemoveEl(singleElement, 'display', hideRemove); });
        }
        hideRemoveEl(element, 'display', hideRemove, true);
    });
    function hideRemoveEl(el, prop, hideRemove, singleElement) {
        if (singleElement === void 0) { singleElement = false; }
        if (el.style) {
            setPropertyToElement(el, prop, hideRemove);
        }
        else {
            try {
                var selector = el.selector;
                if (visitedSelectors[selector] == null) {
                    visitedSelectors[selector] = true;
                    var elems = document.querySelectorAll(selector);
                    elems.forEach(function (singleEl) {
                        return setPropertyToElement(singleEl, prop, hideRemove);
                    });
                }
            }
            catch (e) {
                return getElementsByXpath(el.selector).forEach(function (singleEl) {
                    return setPropertyToElement(singleEl, prop, hideRemove);
                });
            }
        }
    }
    function setPropertyToElement(el, prop, hideRemove) {
        var value = prop === 'visibility' ? 'hidden' : 'none';
        el.style[prop] = hideRemove ? value : '';
    }
    function getElementsByXpath(xpathToExecute) {
        var result = [];
        var nodesSnapshot = document.evaluate(xpathToExecute, document, null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);
        for (var i = 0; i < nodesSnapshot.snapshotLength; i++) {
            result.push(nodesSnapshot.snapshotItem(i));
        }
        return result;
    }
}
exports.default = hideRemoveElements;
//# sourceMappingURL=hideRemoveElements.js.map