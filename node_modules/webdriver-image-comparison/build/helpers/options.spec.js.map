{"version":3,"file":"options.spec.js","sourceRoot":"","sources":["../../lib/helpers/options.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {defaultOptions, methodCompareOptions, screenMethodCompareOptions} from './options';\nimport {ClassOptions} from './options.interface';\nimport {ScreenMethodImageCompareCompareOptions} from '../methods/images.interfaces';\n\ndescribe('options', ()=>{\n  describe('defaultOptions', ()=>{\n    it('should return the default options when no options are provided', ()=>{\n      expect(defaultOptions({})).toMatchSnapshot();\n    });\n\n    it('should return the provided options when options are provided', ()=>{\n      const options:ClassOptions = {\n        addressBarShadowPadding: 1,\n        autoSaveBaseline: true,\n        formatImageName: '{foo}-{bar}',\n        savePerInstance: true,\n        toolBarShadowPadding: 1,\n        disableCSSAnimation: true,\n        fullPageScrollTimeout: 12345,\n        hideScrollBars: true,\n        blockOutStatusBar: true,\n        blockOutToolBar: true,\n        ignoreAlpha: true,\n        ignoreAntialiasing: true,\n        ignoreColors: true,\n        ignoreLess: true,\n        ignoreNothing: true,\n        rawMisMatchPercentage: true,\n        returnAllCompareData: true,\n        saveAboveTolerance: 12,\n        scaleImagesToSameSize: true,\n        tabbableOptions:{\n          circle: {\n            backgroundColor: 'backgroundColor',\n            borderColor: 'borderColor',\n            borderWidth: 123,\n            fontColor: 'fontColor',\n            fontFamily: 'fontFamily',\n            fontSize: 321,\n            size: 567,\n            showNumber: false,\n          },\n          line: {\n            color: 'color',\n            width: 987,\n          },\n        },\n      };\n\n      expect(defaultOptions(options)).toMatchSnapshot();\n    });\n  });\n\n  describe('methodCompareOptions', ()=>{\n    it('should not return the method options when no options are provided', ()=>{\n      expect(methodCompareOptions({})).toMatchSnapshot();\n    });\n\n    it('should return the provided options when options are provided', ()=>{\n      const options = {\n        blockOut: [{height: 1, width: 2, x: 3, y: 4}],\n        ignoreAlpha: true,\n        ignoreAntialiasing: true,\n        ignoreColors: true,\n        ignoreLess: true,\n        ignoreNothing: true,\n        rawMisMatchPercentage: true,\n        returnAllCompareData: true,\n        saveAboveTolerance: 12,\n        scaleImagesToSameSize: true,\n      };\n\n      expect(methodCompareOptions(options)).toMatchSnapshot();\n    });\n  });\n\n  describe('screenMethodCompareOptions', ()=>{\n    it('should not return the screen method options when no options are provided', ()=>{\n      expect(screenMethodCompareOptions({})).toMatchSnapshot();\n    });\n\n    it('should return the provided options when options are provided', ()=>{\n      const options:ScreenMethodImageCompareCompareOptions = {\n        blockOutStatusBar: false,\n        blockOutToolBar: false,\n        blockOut: [{height: 1, width: 2, x: 3, y: 4}],\n        ignoreAlpha: true,\n        ignoreAntialiasing: true,\n        ignoreColors: true,\n        ignoreLess: true,\n        ignoreNothing: true,\n        rawMisMatchPercentage: true,\n        returnAllCompareData: true,\n        saveAboveTolerance: 12,\n        scaleImagesToSameSize: true\n      };\n\n      expect(screenMethodCompareOptions(options)).toMatchSnapshot();\n    });\n  });\n});\n"]}