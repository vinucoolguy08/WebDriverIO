{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../lib/helpers/utils.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,6BAA0B;AAC1B,yCAA+C;AAC/C,qCAAuC;AAYvC,SAAgB,gBAAgB,CAAC,MAAc,EAAE,OAAgC;IACxE,IAAA,WAAW,GAA2C,OAAO,YAAlD,EAAE,UAAU,GAA+B,OAAO,WAAtC,EAAE,QAAQ,GAAqB,OAAO,SAA5B,EAAE,eAAe,GAAI,OAAO,gBAAX,CAAY;IACrE,IAAM,YAAY,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,UAAG,mBAAO,cAAI,WAAW,CAAE,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IAC9F,IAAM,SAAS,GAAG,eAAe,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,CAAC;IACtD,IAAM,UAAU,GAAG,IAAA,WAAI,EAAC,MAAM,EAAE,SAAS,CAAC,CAAC;IAE3C,IAAA,wBAAa,EAAC,UAAU,CAAC,CAAC;IAE1B,OAAO,UAAU,CAAC;AACpB,CAAC;AATD,4CASC;AAKD,SAAgB,cAAc,CAAC,OAA8B;IAC3D,IAAI,QAAQ,GAAuB;QACjC,WAAW,EAAE,OAAO,CAAC,WAAW;QAChC,cAAc,EAAE,OAAO,CAAC,cAAc;QACtC,UAAU,EAAE,OAAO,CAAC,UAAU;QAC9B,GAAG,EAAE,OAAO,CAAC,gBAAgB;QAC7B,MAAM,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,OAAO,CAAC,WAAW;QACrE,OAAO,EAAE,OAAO,CAAC,OAAO;QACxB,MAAM,EAAE,CAAC,OAAO,CAAC,QAAQ,IAAI,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;QAC3G,IAAI,EAAE,OAAO,CAAC,IAAI;QAClB,YAAY,EAAE,OAAO,CAAC,YAAY;QAClC,eAAe,EAAE,OAAO,CAAC,eAAe;QACxC,GAAG,EAAE,OAAO,CAAC,GAAG;QAChB,KAAK,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU;KACnE,CAAC;IAEF,IAAI,QAAQ,GAAG,OAAO,CAAC,eAAe,CAAC;IAEvC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,UAAC,KAAa;QAG1C,QAAQ,GAAG,QAAQ,CAAC,OAAO,CAAC,WAAI,KAAK,MAAG,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;IAC7D,CAAC,CAAC,CAAC;IAEH,OAAO,UAAG,QAAQ,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,SAAM,CAAC;AAC9C,CAAC;AAzBD,wCAyBC;AAKD,SAAgB,aAAa,CAAC,YAAoB;IAChD,OAAO,cAAc,CAAC,YAAY,CAAC,IAAI,UAAU,CAAC,YAAY,CAAC,CAAC;AAClE,CAAC;AAFD,sCAEC;AAKD,SAAgB,cAAc,CAAC,YAAoB;IACjD,OAAO,YAAY,CAAC,WAAW,EAAE,KAAK,qBAAS,CAAC,OAAO,CAAC;AAC1D,CAAC;AAFD,wCAEC;AAKD,SAAgB,UAAU,CAAC,YAAoB;IAC7C,OAAO,YAAY,CAAC,WAAW,EAAE,KAAK,qBAAS,CAAC,GAAG,CAAC;AACtD,CAAC;AAFD,gCAEC;AAKD,SAAgB,kBAAkB,CAAC,WAAmB;IACpD,OAAO,WAAW,KAAK,EAAE,CAAC;AAC5B,CAAC;AAFD,gDAEC;AAKD,SAAgB,wBAAwB,CAAC,YAAoB,EAAE,WAAmB;IAChF,OAAO,aAAa,CAAC,YAAY,CAAC,IAAI,kBAAkB,CAAC,WAAW,CAAC,CAAC;AACxE,CAAC;AAFD,4DAEC;AAKD,SAAgB,+BAA+B,CAAC,YAAoB,EAAE,mBAA4B;IAChG,OAAO,CAAC,cAAc,CAAC,YAAY,CAAC,IAAI,mBAAmB,CAAC,IAAI,KAAK,CAAC;AACxE,CAAC;AAFD,0EAEC;AAKD,SAAgB,kCAAkC,CAAC,YAAoB,EAAE,mBAA4B;IACnG,OAAO,cAAc,CAAC,YAAY,CAAC,IAAI,CAAC,+BAA+B,CAAC,YAAY,EAAE,mBAAmB,CAAC,CAAC;AAC7G,CAAC;AAFD,gFAEC;AAKD,SAAgB,0BAA0B,CAAC,OAA0C;IAEjF,IAAA,YAAY,GAKV,OAAO,aALG,EACZ,WAAW,GAIT,OAAO,YAJE,EACX,mBAAmB,GAGjB,OAAO,oBAHU,EACnB,uBAAuB,GAErB,OAAO,wBAFc,EACvB,gBAAgB,GACd,OAAO,iBADO,CACN;IACZ,IAAM,qBAAqB,GAAG,wBAAwB,CAAC,YAAY,EAAE,WAAW,CAAC,CAAC;IAClF,IAAM,4BAA4B,GAAG,+BAA+B,CAAC,YAAY,EAAE,mBAAmB,CAAC,CAAC;IACxG,IAAM,SAAS,GAAG,cAAc,CAAC,YAAY,CAAC,CAAC;IAC/C,IAAM,KAAK,GAAG,UAAU,CAAC,YAAY,CAAC,CAAC;IAEvC,OAAO,qBAAqB,IAAI,CAAC,CAAC,4BAA4B,IAAI,SAAS,CAAC,IAAI,KAAK,CAAC,IAAI,gBAAgB,CAAC,CAAC,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3I,CAAC;AAdD,gEAcC;AAKD,SAAgB,uBAAuB,CAAC,OAAuC;IACtE,IAAA,YAAY,GAAyD,OAAO,aAAhE,EAAE,WAAW,GAA4C,OAAO,YAAnD,EAAE,oBAAoB,GAAsB,OAAO,qBAA7B,EAAE,gBAAgB,GAAI,OAAO,iBAAX,CAAY;IAEpF,OAAO,wBAAwB,CAAC,YAAY,EAAE,WAAW,CAAC,IAAI,UAAU,CAAC,YAAY,CAAC,IAAI,gBAAgB,CAAC,CAAC,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC;AACxI,CAAC;AAJD,0DAIC;AAKD,SAAgB,gBAAgB,CAAI,IAAO,EAAE,gBAAwB;IAGnE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,UAAC,GAAG,IAAK,OAAA,IAAI,CAAC,GAAG,CAAC,GAAG,OAAO,IAAI,CAAC,GAAG,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,gBAAgB,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAApF,CAAoF,CAAC,CAAC;IAErH,OAAO,IAAI,CAAC;AACd,CAAC;AAND,4CAMC;AAKD,SAAsB,OAAO,CAAC,YAAoB;;;YAEhD,WAAO,IAAI,OAAO,CAAC,UAAA,OAAO,IAAI,OAAA,UAAU,CAAC,cAAM,OAAA,OAAO,EAAE,EAAT,CAAS,EAAE,YAAY,CAAC,EAAzC,CAAyC,CAAC,EAAC;;;CAC1E;AAHD,0BAGC;AAKD,SAAgB,iBAAiB,CAAC,UAAkB,EAAE,iBAA6B;IAA7B,kCAAA,EAAA,qBAA6B;IACjF,OAAO;QACL,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,GAAG,iBAAiB;QAC9E,KAAK,EAAE,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,GAAG,iBAAiB;KAC9E,CAAC;AACJ,CAAC;AALD,8CAKC","sourcesContent":["import {join} from 'path';\nimport {DESKTOP, PLATFORMS} from './constants';\nimport {ensureDirSync} from 'fs-extra';\nimport {\n  FormatFileDefaults,\n  FormatFileNameOptions,\n  GetAddressBarShadowPaddingOptions,\n  GetAndCreatePathOptions,\n  GetToolBarShadowPaddingOptions, ScreenshotSize\n} from './utils.interfaces';\n\n/**\n * Get and create a folder\n */\nexport function getAndCreatePath(folder: string, options: GetAndCreatePathOptions): string {\n  const {browserName, deviceName, isMobile, savePerInstance} = options;\n  const instanceName = (isMobile ? deviceName : `${DESKTOP}_${browserName}`).replace(/ /g, '_');\n  const subFolder = savePerInstance ? instanceName : '';\n  const folderName = join(folder, subFolder);\n\n  ensureDirSync(folderName);\n\n  return folderName;\n}\n\n/**\n * Format the filename\n */\nexport function formatFileName(options: FormatFileNameOptions): string {\n  let defaults: FormatFileDefaults = {\n    browserName: options.browserName,\n    browserVersion: options.browserVersion,\n    deviceName: options.deviceName,\n    dpr: options.devicePixelRatio,\n    height: options.isMobile ? options.screenHeight : options.outerHeight,\n    logName: options.logName,\n    mobile: (options.isMobile && options.isTestInBrowser) ? options.browserName : options.isMobile ? 'app' : '',\n    name: options.name,\n    platformName: options.platformName,\n    platformVersion: options.platformVersion,\n    tag: options.tag,\n    width: options.isMobile ? options.screenWidth : options.outerWidth\n  };\n\n  let fileName = options.formatImageName;\n\n  Object.keys(defaults).forEach((value: string) => {\n    // @ts-ignore\n    // @TODO: Fix this in a proper way\n    fileName = fileName.replace(`{${value}}`, defaults[value]);\n  });\n\n  return `${fileName.replace(/ /g, '_')}.png`;\n}\n\n/**\n * Checks if it is mobile\n */\nexport function checkIsMobile(platformName: string): boolean {\n  return checkIsAndroid(platformName) || checkIsIos(platformName);\n}\n\n/**\n * Checks if the os is Android\n */\nexport function checkIsAndroid(platformName: string): boolean {\n  return platformName.toLowerCase() === PLATFORMS.ANDROID;\n}\n\n/**\n * Checks if the os is IOS\n */\nexport function checkIsIos(platformName: string): boolean {\n  return platformName.toLowerCase() === PLATFORMS.IOS;\n}\n\n/**\n * Checks if the test is executed in a browser\n */\nexport function checkTestInBrowser(browserName: string): boolean {\n  return browserName !== '';\n}\n\n/**\n * Checks if the test is executed in a browser on a mobile phone\n */\nexport function checkTestInMobileBrowser(platformName: string, browserName: string): boolean {\n  return checkIsMobile(platformName) && checkTestInBrowser(browserName);\n}\n\n/**\n * Checks if this is a native webscreenshot on android\n */\nexport function checkAndroidNativeWebScreenshot(platformName: string, nativeWebscreenshot: boolean): boolean {\n  return (checkIsAndroid(platformName) && nativeWebscreenshot) || false;\n}\n\n/**\n * Checks if this is an Android chromedriver screenshot\n */\nexport function checkAndroidChromeDriverScreenshot(platformName: string, nativeWebScreenshot: boolean): boolean {\n  return checkIsAndroid(platformName) && !checkAndroidNativeWebScreenshot(platformName, nativeWebScreenshot);\n}\n\n/**\n * Get the address bar shadow padding. This is only needed for Android native webscreenshot and iOS\n */\nexport function getAddressBarShadowPadding(options: GetAddressBarShadowPaddingOptions): number {\n  const {\n    platformName,\n    browserName,\n    nativeWebScreenshot,\n    addressBarShadowPadding,\n    addShadowPadding,\n  } = options;\n  const isTestInMobileBrowser = checkTestInMobileBrowser(platformName, browserName);\n  const isAndroidNativeWebScreenshot = checkAndroidNativeWebScreenshot(platformName, nativeWebScreenshot);\n  const isAndroid = checkIsAndroid(platformName);\n  const isIos = checkIsIos(platformName);\n\n  return isTestInMobileBrowser && ((isAndroidNativeWebScreenshot && isAndroid) || isIos) && addShadowPadding ? addressBarShadowPadding : 0;\n}\n\n/**\n * Get the tool bar shadow padding. This is only needed for iOS\n */\nexport function getToolBarShadowPadding(options: GetToolBarShadowPaddingOptions): number {\n  const {platformName, browserName, toolBarShadowPadding, addShadowPadding} = options;\n\n  return checkTestInMobileBrowser(platformName, browserName) && checkIsIos(platformName) && addShadowPadding ? toolBarShadowPadding : 0;\n}\n\n/**\n * Calculate the data based on the device pixel ratio\n */\nexport function calculateDprData<T>(data: T, devicePixelRatio: number): T {\n  // @ts-ignore\n  // @TODO: need to figure this one out\n  Object.keys(data).map((key) => data[key] = typeof data[key] === 'number' ? data[key] * devicePixelRatio : data[key]);\n\n  return data;\n}\n\n/**\n * Wait for an amount of milliseconds\n */\nexport async function waitFor(milliseconds: number): Promise<void> {\n  /* istanbul ignore next */\n  return new Promise(resolve => setTimeout(() => resolve(), milliseconds));\n}\n\n/**\n * Get the size of a screenshot in pixels without the device pixel ratio\n */\nexport function getScreenshotSize(screenshot: string, devicePixelRation: number = 1): ScreenshotSize {\n  return {\n    height: Buffer.from(screenshot, 'base64').readUInt32BE(20) / devicePixelRation,\n    width: Buffer.from(screenshot, 'base64').readUInt32BE(16) / devicePixelRation,\n  };\n}\n"]}