"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var options_1 = require("./options");
describe('options', function () {
    describe('defaultOptions', function () {
        it('should return the default options when no options are provided', function () {
            expect((0, options_1.defaultOptions)({})).toMatchSnapshot();
        });
        it('should return the provided options when options are provided', function () {
            var options = {
                addressBarShadowPadding: 1,
                autoSaveBaseline: true,
                formatImageName: '{foo}-{bar}',
                savePerInstance: true,
                toolBarShadowPadding: 1,
                disableCSSAnimation: true,
                fullPageScrollTimeout: 12345,
                hideScrollBars: true,
                blockOutStatusBar: true,
                blockOutToolBar: true,
                ignoreAlpha: true,
                ignoreAntialiasing: true,
                ignoreColors: true,
                ignoreLess: true,
                ignoreNothing: true,
                rawMisMatchPercentage: true,
                returnAllCompareData: true,
                saveAboveTolerance: 12,
                scaleImagesToSameSize: true,
                tabbableOptions: {
                    circle: {
                        backgroundColor: 'backgroundColor',
                        borderColor: 'borderColor',
                        borderWidth: 123,
                        fontColor: 'fontColor',
                        fontFamily: 'fontFamily',
                        fontSize: 321,
                        size: 567,
                        showNumber: false,
                    },
                    line: {
                        color: 'color',
                        width: 987,
                    },
                },
            };
            expect((0, options_1.defaultOptions)(options)).toMatchSnapshot();
        });
    });
    describe('methodCompareOptions', function () {
        it('should not return the method options when no options are provided', function () {
            expect((0, options_1.methodCompareOptions)({})).toMatchSnapshot();
        });
        it('should return the provided options when options are provided', function () {
            var options = {
                blockOut: [{ height: 1, width: 2, x: 3, y: 4 }],
                ignoreAlpha: true,
                ignoreAntialiasing: true,
                ignoreColors: true,
                ignoreLess: true,
                ignoreNothing: true,
                rawMisMatchPercentage: true,
                returnAllCompareData: true,
                saveAboveTolerance: 12,
                scaleImagesToSameSize: true,
            };
            expect((0, options_1.methodCompareOptions)(options)).toMatchSnapshot();
        });
    });
    describe('screenMethodCompareOptions', function () {
        it('should not return the screen method options when no options are provided', function () {
            expect((0, options_1.screenMethodCompareOptions)({})).toMatchSnapshot();
        });
        it('should return the provided options when options are provided', function () {
            var options = {
                blockOutStatusBar: false,
                blockOutToolBar: false,
                blockOut: [{ height: 1, width: 2, x: 3, y: 4 }],
                ignoreAlpha: true,
                ignoreAntialiasing: true,
                ignoreColors: true,
                ignoreLess: true,
                ignoreNothing: true,
                rawMisMatchPercentage: true,
                returnAllCompareData: true,
                saveAboveTolerance: 12,
                scaleImagesToSameSize: true
            };
            expect((0, options_1.screenMethodCompareOptions)(options)).toMatchSnapshot();
        });
    });
});
//# sourceMappingURL=options.spec.js.map