"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _base = _interopRequireDefault(require("webdriver-image-comparison/build/base"));

var _saveScreen = _interopRequireDefault(require("webdriver-image-comparison/build/commands/saveScreen"));

var _checkScreen = _interopRequireDefault(require("webdriver-image-comparison/build/commands/checkScreen"));

var _saveElement = _interopRequireDefault(require("webdriver-image-comparison/build/commands/saveElement"));

var _checkElement = _interopRequireDefault(require("webdriver-image-comparison/build/commands/checkElement"));

var _saveFullPageScreen = _interopRequireDefault(require("webdriver-image-comparison/build/commands/saveFullPageScreen"));

var _checkFullPageScreen = _interopRequireDefault(require("webdriver-image-comparison/build/commands/checkFullPageScreen"));

var _saveTabbablePage = _interopRequireDefault(require("webdriver-image-comparison/build/commands/saveTabbablePage"));

var _checkTabbablePage = _interopRequireDefault(require("webdriver-image-comparison/build/commands/checkTabbablePage"));

var _logger = _interopRequireDefault(require("@wdio/logger"));

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const log = (0, _logger.default)('wdio-image-comparison-service');
const elementCommands = {
  saveElement: _saveElement.default,
  checkElement: _checkElement.default
};
const pageCommands = {
  saveScreen: _saveScreen.default,
  saveFullPageScreen: _saveFullPageScreen.default,
  saveTabbablePage: _saveTabbablePage.default,
  checkScreen: _checkScreen.default,
  checkFullPageScreen: _checkFullPageScreen.default,
  checkTabbablePage: _checkTabbablePage.default
};

class WdioImageComparisonService extends _base.default {
  constructor(options) {
    super(options);
  }
  /**
   * Gets executed before test execution begins. At this point you can access to all global
   * variables like `browser`. It is the perfect place to define custom commands.
   *
   * @param {Array.<Object>} capabilities list of capabilities details
   */


  before(capabilities) {
    if (typeof capabilities['browserName'] !== 'undefined') {
      log.info('Adding commands to global browser');
      this.addCommandsToBrowser(capabilities, browser);
    } else {
      const browserNames = Object.keys(capabilities);
      log.info('Adding commands to Multi Browser: ', browserNames);

      for (const browserName of browserNames) {
        this.addCommandsToBrowser(capabilities[browserName].capabilities, global[browserName]);
      } //Add all the commands to the global browser object that will execute on each browser in the Multi Remote


      for (const command of [...Object.keys(elementCommands), ...Object.keys(pageCommands)]) {
        browser.addCommand(command, function () {
          const returnData = {};

          for (const browserName of browserNames) {
            returnData[browserName] = global[browserName][command].call(global[browserName], ...arguments);
          }

          return returnData;
        });
      }
    }
  }

  addCommandsToBrowser(capabilities, currentBrowser) {
    const instanceData = (0, _utils.getInstanceData)(capabilities, currentBrowser);
    const folders = this.folders;
    const defaultOptions = this.defaultOptions;

    for (const [commandName, command] of Object.entries(elementCommands)) {
      currentBrowser.addCommand(commandName, function (element, tag, elementOptions = {}) {
        return command({
          executor: this.execute.bind(currentBrowser),
          screenShot: this.takeScreenshot.bind(currentBrowser)
        }, instanceData, (0, _utils.getFolders)(elementOptions, folders), element, tag, {
          wic: defaultOptions,
          method: elementOptions
        });
      });
    }

    for (const [commandName, command] of Object.entries(pageCommands)) {
      currentBrowser.addCommand(commandName, function (tag, pageOptions = {}) {
        return command({
          executor: this.execute.bind(currentBrowser),
          screenShot: this.takeScreenshot.bind(currentBrowser)
        }, instanceData, (0, _utils.getFolders)(pageOptions, folders), tag, {
          wic: defaultOptions,
          method: pageOptions
        });
      });
    }
  }

}

exports.default = WdioImageComparisonService;